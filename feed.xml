<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SIML</title>
  
  <subtitle>SIML&#39;s Challenge</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://siml-seo.github.io/"/>
  <updated>2018-01-28T13:49:19.053Z</updated>
  <id>https://siml-seo.github.io/</id>
  
  <author>
    <name>SIML</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4주차</title>
    <link href="https://siml-seo.github.io/2018/01/28/4%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/28/4주차/</id>
    <published>2018-01-28T11:04:36.000Z</published>
    <updated>2018-01-28T13:49:19.053Z</updated>
    
    <content type="html"><![CDATA[<p>최강한파에 따른 감기로 골골대는 일주일이었습니다.</p><p><hr></p><p></p><h3>‘HTMLCSS입문’</h3><p></p><ul><br><li>공부한 시간 : 6시간<br></li><li>새롭게 알게된 사실<br><ol><li>스타일 속성 = 위치(position, float, overflow)<br></li><li>IE 보완 방법 = ie9.js, css3 pie..<br></li><li>부트스트랩 프레임워크</li></ol></li></ul><p>HTMLCSS 경험치 : 2 X 6 = 12 + 22 = 34exp, 새로운 프레임워크를 맛 봤습니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 5시간<br></li><li>새롭게 알게된 사실<br><ol><li>상속 = prototype<br></li><li>원시 데이터 타입, 레퍼 객체 = 복제, 참조<br></li><li>레퍼 호출 = (function($){$()})(jquery)<br></li><li>이벤트 = onclick, onchange, onkeydown, .querySelector</li></ol></li></ul><p>JS경험치 : 2 X 5 = 10 + 22 = 32exp</p><p><hr></p><p></p><h3>‘네트워크원리’</h3><p></p><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>IP헤더 = 플래그(패킷 조각 가능 유무), 프래그먼트오프셋(IP메시지 중 이 패킷의 위치), 프로토콜 번호, 송수신 IP주소<br></li><li>MAC헤더 = 송수신 MAC주소, 이더타입(‘=.프로토콜 번호)<br></li><li>ARP = 전브로드캐스트에 해당 IP주소 색인 질의를 던져 MAC주소 반환받음<br></li><li>리피터허브 = 모두에게 신호, 스위칭허브(現) = 대상 기기에만 신호<br></li><li>LAN어댑터 = 디지털데이터 → 전기, 빛<br></li><li>프리앰블 = 1, 0의 비트열 파형설정(타이밍)<br></li><li>스타트 프레임딜리미터 = 끝자리 11의 비트패턴, 패킷 개시 위치로 간주<br></li><li>클록 = 10 비트형 구분을 위한 별도 신호, 보통 데이터신호와 클록신호 합쳐 보내고, 거기서 원래 데이터 신호만 추출<br></li><li>FCS = 데이터변형 검출위한 비트열<br></li><li>반이중 모드 = 리피터 허브 사용. 타 신호 조사, 없을 시에만 전송. 충돌 시 재밍신호 흘려 송신 동작 멈춘 후 재시도<br></li><li>인터럽트 = PC가 실행중인 작업에 끼어들어 LAN어댑터 쪽으로 주의 환기시켜 데이터 처리로 전환<br></li><li>리어셈블링 = 프래그먼트 오프셋을 확인하여 분할된 패킷 모두 도착하면 패킷을 원래 모습으로 되돌리는 동작<br></li><li>UDP = 제어용 짧은 데이터, 음성 및 동영상 데이터<br></li><li>트위스트 페어 케이블(꼰 선쌍) = PHY(MAU) 회로의 + - 신호 보호를 위해 잡음 억제. 기기 누설전자파가 나선으로 꼰 선과 만날 시 전류 흐르는 방향이 반대가 되어 서로 상쇄. 인접 신호선 누설 전자파(크로스토크)가 꼬는 간격이 다른 + - 신호와 만나 잡음 영향 반대되어 균형이 잡힘<br></li><li>MDI/MDI-X = 전환 스위치. 커넥터와 신호 송수신회로를 직접 결선하거나 교차하여 결선하는 것</li></ol></li></ul><p>네트워크 경험치 : 2 X 4 = 8 + 12 = 20exp, 허브 라우터 파트로 넘어가는 중이라 나름 수월합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최강한파에 따른 감기로 골골대는 일주일이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘HTMLCSS입문’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 6시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게된 사실&lt;br&gt;&lt;ol&gt;&lt;li
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>3주차</title>
    <link href="https://siml-seo.github.io/2018/01/21/3%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/21/3주차/</id>
    <published>2018-01-21T08:07:25.000Z</published>
    <updated>2018-01-21T10:39:27.062Z</updated>
    
    <content type="html"><![CDATA[<p>무난한 일주일이었습니다.<br>발표를 생각해 개인과제를 관리프로그램으로 선회해야할 것 같습니다.</p><p><hr></p><p></p><h3>‘HTMLCSS입문’</h3><p></p><ul><br><li>공부한 시간 : 7시간<br></li><li>새롭게 알게된 사실<br><ol><li>CSS 선택자 = id, class, 속성(input), 후손, 자손,<br>                    동위(애니메이션), 상태(아코디언), 구조(li, 자손)<br>                    링크, 부정, 사용자지정속성(data-)<br></li><li>스타일 속성 = 크기, 색상, url, 가시(display),<br>                 박스(margin,padding), 테두리(border),<br>                 배경(attachment), 폰트</li></ol></li></ul><p>HTMLCSS 경험치 : 2 X 7 = 14 + 8 = 22exp, 기본기가 쌓이고 있습니다.</p><p><hr></p><p></p><h3>‘칸JS’ + ‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 6시간<br></li><li>새롭게 알게된 사실<br><ol><li>모듈(작업 환경요소 변환한 작은 로직) vs<br>        라이브러리(모듈 같은 로직의 집합. 대표적 jQuery)<br></li><li>정규표현식 = 특정 조건의 문자 검색, 치환(주로 url?)<br></li><li>클로저 = 내외부함수 존재시 내부함수 소멸까지 외부함수 지역변수 존재<br></li><li>arguments = 함수 호출시 입력된 인자 담길 은닉된 유사배열<br></li><li>.apply = this와 함께 사용해 여러 객체에 사용할 수 있는 공용함수 정의하여 활용<br></li><li>전역객체 = 모든 객체는 전역객체(window.)의 프로퍼티<br></li><li>생성자 = JS의 객체를 만드는 주체는 함수<br></li><li>변환 = 적용 필드의 변환(좌표이동, 회전, 확대 등)<br>      (translate, rotate, scale, pushMatrix, popMatrix)<br></li></ol></li></ul><p>JS경험치 : 2 X 6 = 12 + 10 = 22exp,<br>칸JS가 너무 지엽적이라, 3D 애니메이션 차트부터 생활코딩JS로 넘어갔습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;무난한 일주일이었습니다.&lt;br&gt;발표를 생각해 개인과제를 관리프로그램으로 선회해야할 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘HTMLCSS입문’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 7시간&lt;br&gt;&lt;/li
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>2주차</title>
    <link href="https://siml-seo.github.io/2018/01/14/2%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/14/2주차/</id>
    <published>2018-01-14T08:53:44.000Z</published>
    <updated>2018-01-14T10:37:45.885Z</updated>
    
    <content type="html"><![CDATA[<p>자바를 이용한 개인과제로 뭐가 좋을 지에 대한 고민이 많은 한 주였습니다.<br>현재로서는 자바를 이용한 슈팅게임이 가장 무난해보입니다.<br>갤러그와 비슷한 형태가 되지 않을까 싶습니다.</p><hr><h3>‘네트워크원리’</h3><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>DNS서버에서 IP 일치 조회에 이용하는 것은 이름, 클래스(현재는 IN), 타입<br></li><li>도메인 명은 계층구조(오른쪽이 상위)<br></li><li>루트 도메인은 모든 DNS서버에 등록, 1번째 DNS → 루트 도메인 → 점차 왼쪽 도메인이 등록된 DNS서버로 이동<br></li><li>캐시에 등록되어있으면 순차이동X 바로이동O<br></li><li>Data 송수신<br>    1)소켓(Data 출입구)작성 = 소켓라이브러리의 socket호출, 디스크립터 생성(소켓일련번호)<br>    2)소켓끼리 파이프연결 = 소켓라이브러리의 connect 호출(디스크립터, 서버IP, 포트번호 입력)<br>    3)Data 송수신 = 소켓라이브러리의 write, read 호출<br>    4)파이프분리, 소켓말소 = 소켓 라이브러리의 close 호출<br></li><li>OS 내의 프로토콜 스택 내에 TCP, UDP, IP(ICMP(패킷운반통지, ARP(MAC주소조사))<br></li><li>라이브러리가 소켓 생성 의뢰시 프로토콜 스택은 소켓 한개 분량의 메모리 확보(디스크립터 주소)<br></li><li>송수신 실행시 프로토콜 스택이 데이터 일시저장할 공간인 버퍼 메모리 확보<br></li><li>데이터저장 패킷 구성 = 이더넷, IP, TCP 제어정보 헤더, 데이터 조각<br></li><li>제어정보 = 송수신 포트번호, 시퀀스번호(데이터 패킷 모을 시의 일련번호), ACK번호(수신처에 도달한 패킷의 총량(일련번호)), 컨트롤비트(잘 전달시 1)<br></li><li>MTU = 패킷 운반 가능 데이터 최대 길이 MSS = 데이터 최대 길이<br></li><li>타임아웃값(ACK번호 도착까지 대기시간), 낭비이니 연속해서 패킷 보냄.<br>수신 가능 최대 데이터 양 = 윈도우사이즈. 빈 영역 생기면 윈도우 통지.<br></li><li>허브 = 이더넷 규칙 = MAC헤더 = 패킷 운반<br></li><li>라우터 = IP 규칙 = IP헤더 = 목적지확인<br></li></ol></li></ul><p>네트워크 경험치 : 2 X 4 = 8 + 4 = 12exp, 아직 흐름이 완전한 건 아닌 것 같습니다.</p><hr><h3>‘칸JS’</h3><ul><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>배열 = [], .push<br></li><li>오브젝트 = {}(키:값의 나열), .prototype<br></li><li>상속 = Creature.call(this, ), Object.creat()<br></li></ol></li></ul><p>JS 경험치 : 2 X 4 = 8 + 2 = 10exp, 배열 등이 나오면서 과제가 점차 어려워지기 시작했습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바를 이용한 개인과제로 뭐가 좋을 지에 대한 고민이 많은 한 주였습니다.&lt;br&gt;현재로서는 자바를 이용한 슈팅게임이 가장 무난해보입니다.&lt;br&gt;갤러그와 비슷한 형태가 되지 않을까 싶습니다.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;‘네트워크원리’&lt;/h3&gt;

&lt;u
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>1주차</title>
    <link href="https://siml-seo.github.io/2018/01/07/1%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/07/1주차/</id>
    <published>2018-01-07T06:41:35.000Z</published>
    <updated>2018-01-14T09:13:46.441Z</updated>
    
    <content type="html"><![CDATA[<p>작심일일이라 부끄러운 한 주였습니다.<br>친구와의 저녁약속, 컨디션 난조 등으로 생각만큼 진도를 나가지 못했습니다.</p><hr><h3>‘성공과 실패를 결정하는 1% 네트워크 원리’<h6>(이하 네트워크원리)</h6></h3><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>URL 끝 / 뒤에는 index.html 등이 생략<br></li><li>리퀘스트라인(HTTP 포맷 첫째 행) = [메소드] [URI] [버전]<br></li><li>메소드 = 동작요구<br></li><li>URI = 액세스 대상<br></li><li>스테이터스라인(응답메시지 첫째 행) = [버전] [스테이터스코드] [응답문구]<br></li><li>스테이터스 코드 = 실행결과 상태 표시<br></li><li>응답문구 = 실행결과 알림<br></li><li>메시지 본문에 영상 등의 태그가 있으면 빈칸표시, 이후 URI부분에 영상 파일 이름 쓴 리퀘스트 메시지 재차전달의 반복<br></li><li>IP 아닌 도메인으로 직접 연결 안하는 이유 = IP 4바이트, 도메인 최대 255바이트. 비효율<br></li><li>Socket 라이브러리 = 네트워크 기능 호출 위한 프로그램 부품집<br></li><li>리졸버 = DNS서버에 IP주소 확인(네임 리졸루션(resolution)), 소켓 라이브러리 내에 포함.<br></li><li>리졸버 호출 방법 = 리졸버 프로그램명(“도메인명”)<br></li><li>리졸버에는 송수신 기능이 없으므로 송신 동작은 OS 내부 포함된 ‘프로토콜 스택’ 호출<br></li></ol></li></ul><p>User → URL → 웹브라우저 → HTTP 리퀘스트 메시지 → 리졸버 호출 → Socket 라이브러리 → 리졸버 → 프로토콜 스택</p><p>네트워크 경험치 : 2 X 2 = 4exp, 새롭게 알게 된 내용이 많았습니다.</p><hr><h3>‘자바 웹 프로그래밍 Next Step’ <h6>(이하 자바웹)</h6></h3><p></p><p><br>경험치가 부족하여 아직 읽을 수가 없었습니다.<br>HTML, CSS, JS, JAVA, String, DB 기초를 쌓은 다음에 도전이 가능할 듯합니다.</p><p>자바웹 경험치 : 0exp</p><hr><h3>‘모던 웹 디자인을 위한 HTML5 + CSS3 입문’<h6>(이하 HTMLCSS입문)</h6></h3><ul><br><li>공부한 시간 : 8시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>루비 문자 = 후리가나<br></li><li>정의 목록 = dl 태그<br></li><li>비디오, 오디오 태그 = 브라우저 호환성 문제에 따른 source 태그<br></li><li>video.js 플러그인 = 비디오 호환성 해결 위한 플러그인<br></li><li>트랙 태그 = 자막<br></li><li>폼 필드를 하나로 묶는 태그 = fieldset<br></li><li>공간 분할 태그 = div, span<br></li><li>시멘틱 구조 = 이름을 지정해 div 대체<br></li></ol></li></ul><p>HTMLCSS 경험치 : 1 X 8 = 8exp, JSP 수업에서 배운 내용이 많았습니다.</p><hr><h3>‘Khanacademy.org 의 Intro to JS’<h6>(이하 칸JS)</h6></h3><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>도형 태그 = ellipse, rect, line<br></li><li>그림 태그 = fill, stroke,nofill, nostroke, strokeweight<br></li><li>텍스트 태그 = text, textsize<br></li><li>변수, 함수 = var Varialbes, function(), draw<br></li><li>마우스 태그 = mouseXY<br></li></ol></li></ul><p>특이사항 : 한 챕터 끝나고 자기주도학습으로 주어지는 과제가 있습니다.<br>음식그리기 과제였는데, 대충해서 제출했다가 지적을 당해 다시 그려야했습니다.</p><p>JS 경험치 : 1 X 2 = 2exp, 아직 기초부분이었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;작심일일이라 부끄러운 한 주였습니다.&lt;br&gt;친구와의 저녁약속, 컨디션 난조 등으로 생각만큼 진도를 나가지 못했습니다.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;‘성공과 실패를 결정하는 1% 네트워크 원리’&lt;h6&gt;(이하 네트워크원리)&lt;/h6&gt;&lt;/h3&gt;

&lt;ul&gt;&lt;
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="HTML" scheme="https://siml-seo.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>블로그 알림문</title>
    <link href="https://siml-seo.github.io/2017/12/31/test/"/>
    <id>https://siml-seo.github.io/2017/12/31/test/</id>
    <published>2017-12-31T09:16:25.000Z</published>
    <updated>2018-01-01T09:49:12.511Z</updated>
    
    <content type="html"><![CDATA[<p>이 블로그는 비전공자(어문전공)로서 IT에 입문한 백수의 성장 상황을 기록하기 위한 블로그입니다.</p><p>현 포스팅 기준 능력상황</p><p>JAVA : 1개월 수강(3 X 20 = 60시간)<br>JSP : 1개월 수강(3 X 20 = 60시간)<br>네트워크 기초 : 1개월 수강(3 X 20 = 60시간)<br>리눅스 : 2개월 수강(3 X 40 = 120시간)<br>C언어 : 1개월 수강(2 X 20 = 40시간)<br>Python : 1개월 수강(3 X 20 = 60시간)</p><p>기타 능력 전무</p><p>앞으로 개인공부를 하며 배워나간 것들 혹은, 배움상황을 기록하여 이를 경험치화하여 나갈 것입니다.</p><p>마지막에 가서는 이 것들을 이용하여 그래프(캔들)로 만들 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 블로그는 비전공자(어문전공)로서 IT에 입문한 백수의 성장 상황을 기록하기 위한 블로그입니다.&lt;/p&gt;
&lt;p&gt;현 포스팅 기준 능력상황&lt;/p&gt;
&lt;p&gt;JAVA : 1개월 수강(3 X 20 = 60시간)&lt;br&gt;JSP : 1개월 수강(3 X 20 = 
      
    
    </summary>
    
    
  </entry>
  
</feed>

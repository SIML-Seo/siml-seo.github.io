<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SIML</title>
  
  <subtitle>SIML&#39;s Challenge</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://siml-seo.github.io/"/>
  <updated>2018-04-15T10:33:49.989Z</updated>
  <id>https://siml-seo.github.io/</id>
  
  <author>
    <name>SIML</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>15주차</title>
    <link href="https://siml-seo.github.io/2018/04/15/15%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/04/15/15주차/</id>
    <published>2018-04-15T09:57:45.000Z</published>
    <updated>2018-04-15T10:33:49.989Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘자바웹’</h3><p></p><ul><br><li>공부한 시간 : 8시간<br></li><li>새롭게 알게 된 사실<br><ol><li>Ajax = ObjectMapper(JSON의 Map형식을 담을 객체), return null(기존 MVC 형식에서 view단으로 직접 포워딩을 했지만, Ajax에서는 이동할 페이지가 없고 자료만 넘기는 형식이므로 반환값 X)<br></li><li>인터페이스의 활용 = 다형성(경우의 수가 2개 이상일 경우 if/else 통해 해결하면 복잡, 인터페이스의 다형성을 이용해 하나의 형태로 처리가능)<br></li><li>인스턴스의 규칙 = 매 클라이언트마다 서로 다른 상태 값 유지 필요시 매 요청마다 인스턴스 생성, 서로 다른 상태값 가지지 않을 경우(메소드만을 가지는 클래스) 한 인스턴스 생성 후 재사용, 스택 영역(각 스레드마다 서로 다른 영역, stack frame의 local variable(로컬변수영역)에 메모리 위치 표시(instance)), 힙 영역(각 스레드가 서로 공유할 수 있는 영역), 객체 생성을 클래스 내애서 행할 경우 해당 클래스 인스턴스(공유)가 직접 힙에 생성되는 대상 객체 인스턴스를 가리키므로 멀티스레드 환경에서 원치 않은 결과값 도출 가능, 서로 다른 상태 값이 필요한 클래스는 반드시 메소드 내에 생성하여 스택 영역에서 대상 인스턴스 가리키도록 할 필요성<br></li></ol></li></ul><p>JSP경험치 : 2 X 8 = 16 + 81 = 97exp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘자바웹’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 8시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;Ajax = ObjectMapper(JSON의 Map형식을 담을 객체)
      
    
    </summary>
    
      <category term="2018/04" scheme="https://siml-seo.github.io/categories/2018-04/"/>
    
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>14주차</title>
    <link href="https://siml-seo.github.io/2018/04/09/14%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/04/09/14주차/</id>
    <published>2018-04-09T13:09:11.000Z</published>
    <updated>2018-04-11T15:04:40.675Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘자바웹’</h3><p></p><ul><br><li>공부한 시간 : 8시간<br></li><li>새롭게 알게 된 사실<br><ol><li>유틸리티 메소드 = $.ajax(O) $(ajax)(X), 특정 DOM요소를 선택 않고 사용하는 것, 특정 대상 아닌 환경 그 자체에 영향<br></li><li>JS템플릿 = HTML조각을 동적으로 만들어 페이지에 추가하는 것, {} 대신에 특정 값을 치환해 추가, JSON으로 온 자료들을 각각에 넣을 수 있음<br></li><li>TLD = Tag Library Descriptor, 정적 메소드를 EL 함수로 등록해 사용하는 것, 반드시 정적(static)<br></li><li>메이븐 = 리퍼지토리(repository, 메이븐 저장소, dependency로 추가할 라이브러리가 해당 저장소에서부터 불러와짐), Effective POM(부모 pom.xml, 메이븐의 모든 작업은 부모 것의 플러그인에서 기인, 자식인 pom.xml에서 오버라이딩 식으로 작성해 새 플러그인 사용), Goal(플러그인을 바로 실행할 수 있도록 디폴트로 등록해둔 명령어, compile, package, eclipse:clean eclipse:eclipse), 기본페이즈(compile → test → package → install → deploy)<br></li><li>임베디드톰캣 = 내장형톰캣, WTP 기반의 톰캣은 IDE 내부에서 톰캣을 제어해 개발, 내장형톰캣은 기본설정 + 자바코드로 직접설정 가능<br></li></ol></li></ul><p>JSP경험치 : 2 X 8 = 16 + 65 = 81exp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘자바웹’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 8시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;유틸리티 메소드 = $.ajax(O) $(ajax)(X), 특정 DOM
      
    
    </summary>
    
      <category term="2018/04" scheme="https://siml-seo.github.io/categories/2018-04/"/>
    
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>13주차</title>
    <link href="https://siml-seo.github.io/2018/04/01/13%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/04/01/13주차/</id>
    <published>2018-04-01T12:22:00.000Z</published>
    <updated>2018-04-03T12:51:42.695Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘자바웹’</h3><p></p><ul><br><li>공부한 시간 : 9시간<br></li><li>새롭게 알게 된 사실<br><ol><li>템플릿메소드 패턴의 단점 = 추상 클래스에 로직 추가가 일어날 경우 호출된 모든 곳에 수정을 가해야하는 것, 이를 해결하기 위해 각 메소드를 인터페이스 생성을 통해 필요할 때만 호출하도록 변경<br></li><li>가변인자 = 변수타입… 변수명, 인자로 올 변수의 개수를 가변적으로 정의하여 몇 개가 들어오든 유연하게 대처, 변수명이 일종의 배열과도 같은 역할을 함<br></li><li>람다식 = 하나의 메소드만을 가지는 인터페이스 구현을 좀 더 간단명료하게 표현, @FunctionalInterface, 인터페이스 = 인자값 -&gt; 구현메소드의 body<br></li></ol></li></ul><p>JSP경험치 : 2 X 9 = 18 + 47 = 65exp, 리팩토링, 라이브러리화가 뭔지 정확하게 체감할 수 있었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘자바웹’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 9시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;템플릿메소드 패턴의 단점 = 추상 클래스에 로직 추가가 일어날 경우 호
      
    
    </summary>
    
      <category term="2018/04" scheme="https://siml-seo.github.io/categories/2018-04/"/>
    
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>12주차</title>
    <link href="https://siml-seo.github.io/2018/03/25/12%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/03/25/12주차/</id>
    <published>2018-03-25T14:11:11.000Z</published>
    <updated>2018-04-02T14:21:53.507Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘자바웹’</h3><p></p><ul><br><li>공부한 시간 : 7시간<br></li><li>새롭게 알게 된 사실<br><ol><li>단위테스트 라이브러리 = JUnit, 테스트 결과를 콘솔에 출력되는 값을 통해 수동으로 확인X, @Test, @Before, assertEquals(True, Null, ..)<br></li><li>logging 라이브러리 = 로그레벨(info warn error 등) 따라 메시지 더할 필요 있는지 여부를 xml을 통해 자동적으로 파악<br></li><li>웹서버 = 웹클라이언트는 웹서버와 데이터 주고 받기 위해 HTTP 규약을 따름(즉 라인, 헤더, 공백, 본문), 이 규약을 스트림을 통해 한줄한줄 읽어 처리하는 것이 웹서버<br></li><li>GET방식 = 요청라인의 구성요소(HTTP메소드, URI, HTTP버전) 중 URI 부분에 각 파라미터값을 포함하여 기재된 상태로 전송되므로 URI를 읽어 처리<br></li><li>POST방식 = GET의 쿼리스트링들을 요청분문을 통해 전달, 해당 요청의 헤더부분에 있는 Content-Length 필드를 통해 본문 길이를 구하고 그 길이만큼 본문을 읽어 Map 형태로 반환해 처리<br></li><li>상태코드 = 200(= 전송성공), 302(= redirect)<br></li><li>무상태프로토콜 = HTTP는 연결은 재사용하지만 각 요청 간의 상태 데이터를 공유할 수 없는 무상태프로토콜, 그렇기에 서버가 클라이언트가 누구인지 식별할 방법이 없어 지원하는 방식이 쿠키, 응답헤더에 Set-Cookie로 값을 저장하면 클라이언트는 요청헤더에 매번 Cookie 헤더 값을 재전송하여 자신을 알림<br></li><li>템플릿메소드 패턴 = 반복적으로 발생하는 로직은 상위 클래스가 구현, 변화가 발생하는 부분만 추상 메소드로 만들어 구현하도록하는 디자인 패턴<br></li></ol></li></ul><p>JSP경험치 : 2 X 7 = 14 + 33 = 47exp, 확실히 전문적이고 실용적인 지식은 늘어났으나 이게 과연 지금 나한테 정말로 적합한 지식인가하는 의문은 계속해서 생기고 있습니다.</p><p><hr></p><p></p><h3>‘자바’</h3><p></p><ul><br><li>공부한 시간 : 1시간<br></li><li>새롭게 알게 된 사실<br><ol><li>익명클래스 = 인터페이스는 구현화 되지 않으면 객체를 생성하는 것이 불가능. 객체를 만드는 동시에 오버라이드해서 객체를 생성하는 것이 익명클래스. 즉, new abstract(){ @Override ~ } 의 형태<br></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘자바웹’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 7시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;단위테스트 라이브러리 = JUnit, 테스트 결과를 콘솔에 출력되는 값
      
    
    </summary>
    
      <category term="2018/03" scheme="https://siml-seo.github.io/categories/2018-03/"/>
    
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
      <category term="JAVA" scheme="https://siml-seo.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>11주차</title>
    <link href="https://siml-seo.github.io/2018/03/18/11%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/03/18/11주차/</id>
    <published>2018-03-18T12:59:40.000Z</published>
    <updated>2018-03-18T13:33:32.240Z</updated>
    
    <content type="html"><![CDATA[<p>생일이 끼어있는 주라 저녁시간을 많이 활용하지 못했습니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게 된 사실<br><ol><li>ArrayAccessObject = 객체 내의 프로퍼티를 조작하는 방법, var.prop, var[‘prop’]의 차이(인덱스의 이름을 변수로 처리해서 동적으로 처리할 수 있다, [] 안의 것은 변수로서 객체 내의 프로퍼티를 참조하여 조작가능)<br></li><li>북마클릿화 = URL에 javascript: 로 JS문 직접호출가능</li></ol></li></ul><p>JS경험치 : 2 X 2 = 4 + 72 = 76exp, 일단은 JS강의가 끝이 났지만, 역시 책이 아니라 그런지 머리 속에서 정리가 잘 안되어 책을 봐야할 것 같습니다.</p><p><hr></p><p></p><h3>‘인프런JSP’</h3><p></p><ul><br><li>공부한 시간 : 5시간<br></li><li>새롭게 알게 된 사실<br><ol><li>MVC = model1(View와 Controller가 한 파일로 있는 형태, 규모 작고 유지보수보다 빠른 개발 선호시), model2(Model, View Controller가 모두 모듈화, 규모크고 유지보수 수시로 있을 경우), 기본 구조(.do 요청 → FrontController 요청페이지 확인하여 분기 → ListCommand Dao에 연결 → Dao 컨트롤러에서 요청한 작업 수행 → .jsp 컨트롤러에서 완료한 작업 표시)<br></li></ol></li></ul><p>JSP경험치 : 2 X 5 = 10 + 23 = 33exp, 서블릿에 대한 것을 그냥 넘겨서는 안된다는 것을 깨달았습니다.</p><p><hr></p><p></p><h3>‘자바’</h3><p></p><ul><br><li>공부한 시간 : 1시간<br></li><li>새롭게 알게 된 사실<br><ol><li>JVM = OS가 독립적으로 수행하던 메모리 사용권한 할당받아 프로그램 실행<br></li><li>JVM메모리구조 = 클래스(변수정보, 메소드정보, 클래스정보, static변수, 상수풀), 스택(메소드호출시 메소드 관련 모든정보, 수행끝나면 삭제), 힙(객체, 배열, new, eden, survivor, old)</li></ol></li></ul><p>static을 보면서 미진했던 것을 메모리구조와 JVM을 살펴보며 잘 이해할 수 있었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;생일이 끼어있는 주라 저녁시간을 많이 활용하지 못했습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 2시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;
      
    
    </summary>
    
      <category term="2018/03" scheme="https://siml-seo.github.io/categories/2018-03/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
      <category term="JAVA" scheme="https://siml-seo.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>10주차</title>
    <link href="https://siml-seo.github.io/2018/03/11/10%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/03/11/10주차/</id>
    <published>2018-03-11T13:10:40.000Z</published>
    <updated>2018-03-11T14:14:20.851Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게 된 사실<br><ol><li>Ajax = 비동기적으로 서버&amp;브라우저 데이터 전송, 별도 로딩 없이 페이지에 프로그래밍 반영, new XMLHttpRequest, .onreadystatechange(통신 종료 시 호출되는 이벤트), .readyState(통신의 현재 상태, 4 = 통신완료), .status(통신결과, 200 = 성공), .responseText(서버에서 전송한 데이터)<br></li><li>JSON = 자바스크립트에서 객체를 만들때 사용하는 표현식 적용(서로 다른 언어끼리 동일한 표현식으로 전송), JSON.parse()(인자로 전달된 문자열 → JS 데이터), JSON.stringify()(인자로 전달된 JS데이터 → 문자열)<br></li><li>$.ajax = Ajax의 크로싱브라우저 문제를 jQuery가 자동해결, url, data(url 전송 결과 데이터, $().serialize()(인자 내의 정보 ‘이름=내용&amp;’ 형식으로 자동변환)), dataType(전송데이터 형식), type(데이터 전송방법), success(성공시 호출할 함수)</li></ol></li></ul><p>JS경험치 : 2 X 2 = 4 + 68 = 72exp</p><p><hr></p><p></p><h3>‘인프런JSP’</h3><p></p><ul><br><li>공부한 시간 : 8시간<br></li><li>새롭게 알게 된 사실<br><ol><li>커넥션풀 = DB에 다중접속시 발생할 과부하 방지 위해 커넥션 객체를 미리 만들기, &lt;Resource ‘auth(작업위치, Container) , driverClassName(~.OracleDriver), url(DB위치 ~:xe), username, password, name(오라클명), type, maxActive(생성 풀 개수), maxWait(풀 소진시 재생성 대기시간)/&gt;, Datasource(DAO에서 읽어오기 위한 객체)<br></li><li>파일업로드 = 자료실, 게시판 등에 이용되는 업로드 기능, 주로 cos 라이브러리를 사용, MultipartRequest(request, 저장경로, 크기, 인코딩형식, 동일이름 시 사용할 정책)<br></li><li>패턴 = 디렉터리 패턴(uri패턴, 디렉터리 형식으로 매핑) 확장자 패턴(url패턴, 확장자 형태로 매핑), FrontController 패턴(클라이언트의 요청 한 곳에 집중), Command패턴(클라이언트의 요청 집중받은 곳 아닌 개별 클래스에서 처리)</li></ol></li></ul><p>JSP경험치 : 2 X 8 = 16 + 7 = 23exp, 패턴이 나오기 시작하면서 실무적인 느낌이 들었습니다.</p><p><hr></p><p></p><h3>‘자바’</h3><p></p><p><ul></ul></p><li>공부한 시간 : 2시간<br></li><li>새롭게 알게 된 사실<br><ol><li>private static final = static 멤버변수(클래스변수, 모든 해당 클래스는 같은 메모리를 공유), static은 데이터 영역에 속하기에 항상 메모리에 상주 Heap 영역처럼 객체 생성시 메모리에 로드 되는 것 X, static final(클래스에서 사용할 해당 멤버 변수의 데이터와 의미 용도 고정, 그러므로 인스턴스 생성시 마다 새 메모리 잡고 초기화하는 것이 아니라 클래스 레벨에서 한 번만 잡아 한 메모리 공간 사용)<br></li><li>싱글톤 패턴 = Eager(클래스 로딩시 곧바로 객체 생성, 프로그램 크기 커질 시 부담), static block(기본과 동일하나 block단에 로직이나 예외처리 구현가능), lazy(메소드 실행시 객체 생성, 멀티스레드 방식시 인스턴스화 중복될 우려), thread safe(getInstace 메소드를 synchronized하여 동기화 문제 해결, 많은 스레드에서 메소드 호출시 높은 비용으로 성능저하), initialization on demand holder(내부 클래스를 생성시킴으로서 동기화 문제와 높은 비용 해결)</li></ol></li><p>싱글톤에 대해 더 알 수 있었고, static 개념을 좀 더 확실히 알게되었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 2시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;Ajax = 비동기적으로 서버&amp;amp;브라우저 데이터 전송, 별도
      
    
    </summary>
    
      <category term="2018/03" scheme="https://siml-seo.github.io/categories/2018-03/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
      <category term="JAVA" scheme="https://siml-seo.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>9주차</title>
    <link href="https://siml-seo.github.io/2018/03/04/9%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/03/04/9주차/</id>
    <published>2018-03-04T12:56:34.000Z</published>
    <updated>2018-03-04T15:15:36.734Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게 된 사실<br><ol><li>이벤트 타입 = 폼(submit, change, blur, focus), 문서로딩(DOMContentLoaded), 마우스(click, .. , contextmenu, event.shiftkey, event.clientX)<br></li><li>jQuery on API = selector로 버블링 구현(body에 등록하고 셀럭터로 태그 지정), 다중바인딩</li></ol></li></ul><p>JS경험치 : 2 X 2 = 4 + 64 = 68exp</p><p><hr></p><p></p><h3>‘인프런JSP’</h3><p></p><ul><br><li>공부한 시간 : 7시간<br></li><li>새롭게 알게 된 사실<br><ol><li>내장객체 = jsp컨테이너(서블릿컨테이너)에 의해 servlet 변환시 자동으로 객체 생성<br></li><li>useBean = 빈 클래스 불러오는 역할만. 프로퍼티로 설정을 해줘야 이용이 가능<br></li><li>표현언어 = 어디까지나 표현식의 역할 대신, 스크립트릿, 선언식의 역할X<br></li><li>DBMS = Database Management System, 데이터베이스 관리 위한 도구, 통상 데이터베이스와 동일시. 가장 많이 사용하는 것이 RDMBS(Relational ~)로 대표적인 것이 오라클, sqlplus는 DB 관리 위한 오라클 기본 제공의 무료 툴</li></ol></li></ul><p>JSP경험치 : 1 X 7 = 7exp, 복습차원에서 했던 것이라 새롭게 알게된 것 보다는 정리에 더 가까웠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 2시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게 된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;이벤트 타입 = 폼(submit, change, blur, foc
      
    
    </summary>
    
      <category term="2018/03" scheme="https://siml-seo.github.io/categories/2018-03/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="JSP" scheme="https://siml-seo.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>8주차</title>
    <link href="https://siml-seo.github.io/2018/02/25/8%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/02/25/8주차/</id>
    <published>2018-02-25T13:01:51.000Z</published>
    <updated>2018-02-25T14:53:20.802Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 6시간<br></li><li>새롭게 알게된 사실<br><ol><li>Node객체 = .appendChild, .replaceChild, .removeChild(새로운 노드를 추가하기 위해서는 document 객체인 createElement 기능을 통해 엘리먼트 노드를 추가하고, createTextNode로 텍스트 노드를 추가한다. 이 것을 자식으로서 엘리먼트에 추가), 문자열로 노드 제어(객체.innerHTML, innerText 등이 간편)<br></li><li>Text객체 = 공백이나 줄바꿈도 텍스트 노드, .nodeValue로 텍스트 노드의 값을 반환 또는 변환, .appendData, .deleteData, .insertData 등으로 제어<br></li><li>요소 크기, 위치 = .getBoundingClientRect으로 나오는 요소의 위치 값은 부모 기준이 아니라 body를 기준, viewport(사용자에게 보이는 영역)의 좌표 사용<br></li><li>이벤트 = 인라인방식(HTML(정보)+JS(제어)), 프로퍼티 리스너 방식(객체.이벤트, return false로 기본동작 취소), addEventListener 방식(객체.addEventListener(이벤트, 함수), 복수 엘리먼트에 한 리스너 등록해 재사용 가능, .preventDefault()로 기본동작 취소), 캡처링(이벤트가 부모에서부터 발생해 자식으로 전파되는 것), 버블링(자식에서 발생해 부모로 전파되는 것)</li></ol></li></ul><p>JS경험치 : 2 X 6 = 12 + 52 = 64exp</p><p><hr></p><p></p><h3>‘HTMLCSS입문’</h3><p></p><ul><br><li>공부한 시간 : 5시간<br></li><li>새롭게 알게된 사실<br><ol><li>레이아웃 구성 = 페이지 구상 → 구성 영역 분리 → 행 단위 분리 → 행 내부 요소 분리<br></li><li>초기화 = 모든 HTML 페이지 첫번째 스타일시트에 초기화 코드, 모든 웹브라우저에서 동일 출력 결과 만들기 위함<br></li><li>CSS 사이드 탭바 = radio + label + checked + display</li></ol></li></ul><p>HTMLCSS 경험치 : 2 X 5 = 10 + 34 = 44exp, 실제로 어떻게 적용되고 어떤 식으로 작성하는지 알 수 있었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 6시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;Node객체 = .appendChild, .replaceChild,
      
    
    </summary>
    
      <category term="2018/02" scheme="https://siml-seo.github.io/categories/2018-02/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>7주차</title>
    <link href="https://siml-seo.github.io/2018/02/18/7%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/02/18/7주차/</id>
    <published>2018-02-18T12:16:00.000Z</published>
    <updated>2018-02-18T13:59:52.580Z</updated>
    
    <content type="html"><![CDATA[<p>드디어 개인과제가 끝났습니다. 직원 관리 프로그램을 TUI로 구현했습니다. 총 소요시간은 32시간입니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게된 사실<br><ol><li>Node 객체 = 모든 DOM 객체의 상위 객체, .childNodes(자식노드 배열), .nextSibling(다음형제), previousSibling(이전형제), 유형화된 것처럼 보이는 객체만 취급하는 것이 아니라 \n과 같은 공백문자(#text)도 포함, .nodeType(노드 타입)을 이용한 재귀함수(원함수→광범위→대상제어→매개함수(재귀함수))</li></ol></li></ul><p>JS경험치 : 2 X 2 = 4 + 48 = 52exp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;드디어 개인과제가 끝났습니다. 직원 관리 프로그램을 TUI로 구현했습니다. 총 소요시간은 32시간입니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 2시간&lt;br&gt;&lt;/
      
    
    </summary>
    
      <category term="2018/02" scheme="https://siml-seo.github.io/categories/2018-02/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>6주차</title>
    <link href="https://siml-seo.github.io/2018/02/11/6%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/02/11/6주차/</id>
    <published>2018-02-11T12:53:37.000Z</published>
    <updated>2018-02-11T13:12:09.144Z</updated>
    
    <content type="html"><![CDATA[<p>개인과제를 진행했기에 쪼갤 시간이 부족했습니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>jQuery = 암시적 반복(DOM과 달리 메소드 실행시 선택된 엘리먼트 전체에 대해 동시작업, 설정(인자 2개)일 때만 작용), 체이닝(선택 엘리먼트에 연속작업), map메소드(순회조회, 인자로 반드시 함수 포함해야함)<br></li><li>식별자(Element 객체) = 문서내 특정 엘리먼트 식별(Element.className보다 classList가 클래스 추가, 삭제 등에 용의(toggle))<br></li><li>조회(Element 객체) = DOM의 getElement와 달리 해당 엘리먼트 하위만을 조회(getElement, querySeletor)<br></li><li>속성(Element 객체) = 엘리먼트 속성을 알아내고 변경(getAttribute, setAttribute, removeAttribute), 프로퍼티에 직접 대입하는 방식이 더 빠르고 편하지만 실 html속성 이름과 다른 이름을 갖는 경우가 많음<br></li><li>jQuery 속성제어 = .attr(), .removeAttr(), .prop(), 프로퍼티 고유 이름 아니라도 동일결과 처리, selector context(Element 객체처럼 조회대상을 줄여서 사용하는 방법, 쿼리문 인자로 두 대상을 넣어 사용, find)</li></ol></li></ul><p>JS경험치 : 2 X 4 = 8 + 40 = 48exp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개인과제를 진행했기에 쪼갤 시간이 부족했습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 4시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;jQu
      
    
    </summary>
    
      <category term="2018/02" scheme="https://siml-seo.github.io/categories/2018-02/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>5주차</title>
    <link href="https://siml-seo.github.io/2018/02/04/5%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/02/04/5주차/</id>
    <published>2018-02-04T10:47:08.000Z</published>
    <updated>2018-02-04T11:10:15.136Z</updated>
    
    <content type="html"><![CDATA[<p>개인과제를 시작했기에 쪼갤 시간이 부족했습니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>ObjectModel = JS로 제어가능한 대상<br></li><li>BOM = Browser Object Model, 웹페이지 내용 제외한 브라우저 각종 요소 객체화<br></li><li>BOM = alert(경고창), confirm(확인창), propmt(입력창),<br>location(브라우저 문서 주소), navigator(브라우저 자체 정보)<br></li><li>DOM = Document Object Model, 웹 페이지 내용 제어,<br>document.getElementsByTagName 등등<br></li><li>HTMLElement = .getElementById(HTMLElement),<br>.getElementsByTagName(HTMLElementCollection(유사배열)) 등의 메소드 통해 조회한 객체의 리턴 값<br></li><li>jQuery = 기본형 ($(선택자).css(‘sytle’, ‘옵션’)),<br>중복형 ($(#active).css(‘color’,’red’).css(‘textDecoration’ , ‘underline’)), 배열형 $(li[i]).css(~)</li></ol></li></ul><p>JS경험치 : 2 X 4 = 8 + 32 = 40exp</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개인과제를 시작했기에 쪼갤 시간이 부족했습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘생활코딩JS’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 4시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게된 사실&lt;br&gt;&lt;ol&gt;&lt;li&gt;Obj
      
    
    </summary>
    
      <category term="2018/02" scheme="https://siml-seo.github.io/categories/2018-02/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>4주차</title>
    <link href="https://siml-seo.github.io/2018/01/28/4%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/28/4주차/</id>
    <published>2018-01-28T11:04:36.000Z</published>
    <updated>2018-01-28T13:49:19.053Z</updated>
    
    <content type="html"><![CDATA[<p>최강한파에 따른 감기로 골골대는 일주일이었습니다.</p><p><hr></p><p></p><h3>‘HTMLCSS입문’</h3><p></p><ul><br><li>공부한 시간 : 6시간<br></li><li>새롭게 알게된 사실<br><ol><li>스타일 속성 = 위치(position, float, overflow)<br></li><li>IE 보완 방법 = ie9.js, css3 pie..<br></li><li>부트스트랩 프레임워크</li></ol></li></ul><p>HTMLCSS 경험치 : 2 X 6 = 12 + 22 = 34exp, 새로운 프레임워크를 맛 봤습니다.</p><p><hr></p><p></p><h3>‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 5시간<br></li><li>새롭게 알게된 사실<br><ol><li>상속 = prototype<br></li><li>원시 데이터 타입, 레퍼 객체 = 복제, 참조<br></li><li>레퍼 호출 = (function($){$()})(jquery)<br></li><li>이벤트 = onclick, onchange, onkeydown, .querySelector</li></ol></li></ul><p>JS경험치 : 2 X 5 = 10 + 22 = 32exp</p><p><hr></p><p></p><h3>‘네트워크원리’</h3><p></p><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>IP헤더 = 플래그(패킷 조각 가능 유무), 프래그먼트오프셋(IP메시지 중 이 패킷의 위치), 프로토콜 번호, 송수신 IP주소<br></li><li>MAC헤더 = 송수신 MAC주소, 이더타입(‘=.프로토콜 번호)<br></li><li>ARP = 전브로드캐스트에 해당 IP주소 색인 질의를 던져 MAC주소 반환받음<br></li><li>리피터허브 = 모두에게 신호, 스위칭허브(現) = 대상 기기에만 신호<br></li><li>LAN어댑터 = 디지털데이터 → 전기, 빛<br></li><li>프리앰블 = 1, 0의 비트열 파형설정(타이밍)<br></li><li>스타트 프레임딜리미터 = 끝자리 11의 비트패턴, 패킷 개시 위치로 간주<br></li><li>클록 = 10 비트형 구분을 위한 별도 신호, 보통 데이터신호와 클록신호 합쳐 보내고, 거기서 원래 데이터 신호만 추출<br></li><li>FCS = 데이터변형 검출위한 비트열<br></li><li>반이중 모드 = 리피터 허브 사용. 타 신호 조사, 없을 시에만 전송. 충돌 시 재밍신호 흘려 송신 동작 멈춘 후 재시도<br></li><li>인터럽트 = PC가 실행중인 작업에 끼어들어 LAN어댑터 쪽으로 주의 환기시켜 데이터 처리로 전환<br></li><li>리어셈블링 = 프래그먼트 오프셋을 확인하여 분할된 패킷 모두 도착하면 패킷을 원래 모습으로 되돌리는 동작<br></li><li>UDP = 제어용 짧은 데이터, 음성 및 동영상 데이터<br></li><li>트위스트 페어 케이블(꼰 선쌍) = PHY(MAU) 회로의 + - 신호 보호를 위해 잡음 억제. 기기 누설전자파가 나선으로 꼰 선과 만날 시 전류 흐르는 방향이 반대가 되어 서로 상쇄. 인접 신호선 누설 전자파(크로스토크)가 꼬는 간격이 다른 + - 신호와 만나 잡음 영향 반대되어 균형이 잡힘<br></li><li>MDI/MDI-X = 전환 스위치. 커넥터와 신호 송수신회로를 직접 결선하거나 교차하여 결선하는 것</li></ol></li></ul><p>네트워크 경험치 : 2 X 4 = 8 + 12 = 20exp, 허브 라우터 파트로 넘어가는 중이라 나름 수월합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최강한파에 따른 감기로 골골대는 일주일이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘HTMLCSS입문’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 6시간&lt;br&gt;&lt;/li&gt;&lt;li&gt;새롭게 알게된 사실&lt;br&gt;&lt;ol&gt;&lt;li
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>3주차</title>
    <link href="https://siml-seo.github.io/2018/01/21/3%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/21/3주차/</id>
    <published>2018-01-21T08:07:25.000Z</published>
    <updated>2018-01-21T10:39:27.062Z</updated>
    
    <content type="html"><![CDATA[<p>무난한 일주일이었습니다.<br>발표를 생각해 개인과제를 관리프로그램으로 선회해야할 것 같습니다.</p><p><hr></p><p></p><h3>‘HTMLCSS입문’</h3><p></p><ul><br><li>공부한 시간 : 7시간<br></li><li>새롭게 알게된 사실<br><ol><li>CSS 선택자 = id, class, 속성(input), 후손, 자손,<br>                    동위(애니메이션), 상태(아코디언), 구조(li, 자손)<br>                    링크, 부정, 사용자지정속성(data-)<br></li><li>스타일 속성 = 크기, 색상, url, 가시(display),<br>                 박스(margin,padding), 테두리(border),<br>                 배경(attachment), 폰트</li></ol></li></ul><p>HTMLCSS 경험치 : 2 X 7 = 14 + 8 = 22exp, 기본기가 쌓이고 있습니다.</p><p><hr></p><p></p><h3>‘칸JS’ + ‘생활코딩JS’</h3><p></p><ul><br><li>공부한 시간 : 6시간<br></li><li>새롭게 알게된 사실<br><ol><li>모듈(작업 환경요소 변환한 작은 로직) vs<br>        라이브러리(모듈 같은 로직의 집합. 대표적 jQuery)<br></li><li>정규표현식 = 특정 조건의 문자 검색, 치환(주로 url?)<br></li><li>클로저 = 내외부함수 존재시 내부함수 소멸까지 외부함수 지역변수 존재<br></li><li>arguments = 함수 호출시 입력된 인자 담길 은닉된 유사배열<br></li><li>.apply = this와 함께 사용해 여러 객체에 사용할 수 있는 공용함수 정의하여 활용<br></li><li>전역객체 = 모든 객체는 전역객체(window.)의 프로퍼티<br></li><li>생성자 = JS의 객체를 만드는 주체는 함수<br></li><li>변환 = 적용 필드의 변환(좌표이동, 회전, 확대 등)<br>      (translate, rotate, scale, pushMatrix, popMatrix)<br></li></ol></li></ul><p>JS경험치 : 2 X 6 = 12 + 10 = 22exp,<br>칸JS가 너무 지엽적이라, 3D 애니메이션 차트부터 생활코딩JS로 넘어갔습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;무난한 일주일이었습니다.&lt;br&gt;발표를 생각해 개인과제를 관리프로그램으로 선회해야할 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;‘HTMLCSS입문’&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;&lt;li&gt;공부한 시간 : 7시간&lt;br&gt;&lt;/li
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>2주차</title>
    <link href="https://siml-seo.github.io/2018/01/14/2%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/14/2주차/</id>
    <published>2018-01-14T08:53:44.000Z</published>
    <updated>2018-01-14T10:37:45.885Z</updated>
    
    <content type="html"><![CDATA[<p>자바를 이용한 개인과제로 뭐가 좋을 지에 대한 고민이 많은 한 주였습니다.<br>현재로서는 자바를 이용한 슈팅게임이 가장 무난해보입니다.<br>갤러그와 비슷한 형태가 되지 않을까 싶습니다.</p><hr><h3>‘네트워크원리’</h3><ul><br><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>DNS서버에서 IP 일치 조회에 이용하는 것은 이름, 클래스(현재는 IN), 타입<br></li><li>도메인 명은 계층구조(오른쪽이 상위)<br></li><li>루트 도메인은 모든 DNS서버에 등록, 1번째 DNS → 루트 도메인 → 점차 왼쪽 도메인이 등록된 DNS서버로 이동<br></li><li>캐시에 등록되어있으면 순차이동X 바로이동O<br></li><li>Data 송수신<br>    1)소켓(Data 출입구)작성 = 소켓라이브러리의 socket호출, 디스크립터 생성(소켓일련번호)<br>    2)소켓끼리 파이프연결 = 소켓라이브러리의 connect 호출(디스크립터, 서버IP, 포트번호 입력)<br>    3)Data 송수신 = 소켓라이브러리의 write, read 호출<br>    4)파이프분리, 소켓말소 = 소켓 라이브러리의 close 호출<br></li><li>OS 내의 프로토콜 스택 내에 TCP, UDP, IP(ICMP(패킷운반통지, ARP(MAC주소조사))<br></li><li>라이브러리가 소켓 생성 의뢰시 프로토콜 스택은 소켓 한개 분량의 메모리 확보(디스크립터 주소)<br></li><li>송수신 실행시 프로토콜 스택이 데이터 일시저장할 공간인 버퍼 메모리 확보<br></li><li>데이터저장 패킷 구성 = 이더넷, IP, TCP 제어정보 헤더, 데이터 조각<br></li><li>제어정보 = 송수신 포트번호, 시퀀스번호(데이터 패킷 모을 시의 일련번호), ACK번호(수신처에 도달한 패킷의 총량(일련번호)), 컨트롤비트(잘 전달시 1)<br></li><li>MTU = 패킷 운반 가능 데이터 최대 길이 MSS = 데이터 최대 길이<br></li><li>타임아웃값(ACK번호 도착까지 대기시간), 낭비이니 연속해서 패킷 보냄.<br>수신 가능 최대 데이터 양 = 윈도우사이즈. 빈 영역 생기면 윈도우 통지.<br></li><li>허브 = 이더넷 규칙 = MAC헤더 = 패킷 운반<br></li><li>라우터 = IP 규칙 = IP헤더 = 목적지확인<br></li></ol></li></ul><p>네트워크 경험치 : 2 X 4 = 8 + 4 = 12exp, 아직 흐름이 완전한 건 아닌 것 같습니다.</p><hr><h3>‘칸JS’</h3><ul><li>공부한 시간 : 4시간<br></li><li>새롭게 알게된 사실<br><ol><li>배열 = [], .push<br></li><li>오브젝트 = {}(키:값의 나열), .prototype<br></li><li>상속 = Creature.call(this, ), Object.creat()<br></li></ol></li></ul><p>JS 경험치 : 2 X 4 = 8 + 2 = 10exp, 배열 등이 나오면서 과제가 점차 어려워지기 시작했습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바를 이용한 개인과제로 뭐가 좋을 지에 대한 고민이 많은 한 주였습니다.&lt;br&gt;현재로서는 자바를 이용한 슈팅게임이 가장 무난해보입니다.&lt;br&gt;갤러그와 비슷한 형태가 되지 않을까 싶습니다.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;‘네트워크원리’&lt;/h3&gt;

&lt;u
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
  </entry>
  
  <entry>
    <title>1주차</title>
    <link href="https://siml-seo.github.io/2018/01/07/1%EC%A3%BC%EC%B0%A8/"/>
    <id>https://siml-seo.github.io/2018/01/07/1주차/</id>
    <published>2018-01-07T06:41:35.000Z</published>
    <updated>2018-01-14T09:13:46.441Z</updated>
    
    <content type="html"><![CDATA[<p>작심일일이라 부끄러운 한 주였습니다.<br>친구와의 저녁약속, 컨디션 난조 등으로 생각만큼 진도를 나가지 못했습니다.</p><hr><h3>‘성공과 실패를 결정하는 1% 네트워크 원리’<h6>(이하 네트워크원리)</h6></h3><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>URL 끝 / 뒤에는 index.html 등이 생략<br></li><li>리퀘스트라인(HTTP 포맷 첫째 행) = [메소드] [URI] [버전]<br></li><li>메소드 = 동작요구<br></li><li>URI = 액세스 대상<br></li><li>스테이터스라인(응답메시지 첫째 행) = [버전] [스테이터스코드] [응답문구]<br></li><li>스테이터스 코드 = 실행결과 상태 표시<br></li><li>응답문구 = 실행결과 알림<br></li><li>메시지 본문에 영상 등의 태그가 있으면 빈칸표시, 이후 URI부분에 영상 파일 이름 쓴 리퀘스트 메시지 재차전달의 반복<br></li><li>IP 아닌 도메인으로 직접 연결 안하는 이유 = IP 4바이트, 도메인 최대 255바이트. 비효율<br></li><li>Socket 라이브러리 = 네트워크 기능 호출 위한 프로그램 부품집<br></li><li>리졸버 = DNS서버에 IP주소 확인(네임 리졸루션(resolution)), 소켓 라이브러리 내에 포함.<br></li><li>리졸버 호출 방법 = 리졸버 프로그램명(“도메인명”)<br></li><li>리졸버에는 송수신 기능이 없으므로 송신 동작은 OS 내부 포함된 ‘프로토콜 스택’ 호출<br></li></ol></li></ul><p>User → URL → 웹브라우저 → HTTP 리퀘스트 메시지 → 리졸버 호출 → Socket 라이브러리 → 리졸버 → 프로토콜 스택</p><p>네트워크 경험치 : 2 X 2 = 4exp, 새롭게 알게 된 내용이 많았습니다.</p><hr><h3>‘자바 웹 프로그래밍 Next Step’ <h6>(이하 자바웹)</h6></h3><p></p><p><br>경험치가 부족하여 아직 읽을 수가 없었습니다.<br>HTML, CSS, JS, JAVA, String, DB 기초를 쌓은 다음에 도전이 가능할 듯합니다.</p><p>자바웹 경험치 : 0exp</p><hr><h3>‘모던 웹 디자인을 위한 HTML5 + CSS3 입문’<h6>(이하 HTMLCSS입문)</h6></h3><ul><br><li>공부한 시간 : 8시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>루비 문자 = 후리가나<br></li><li>정의 목록 = dl 태그<br></li><li>비디오, 오디오 태그 = 브라우저 호환성 문제에 따른 source 태그<br></li><li>video.js 플러그인 = 비디오 호환성 해결 위한 플러그인<br></li><li>트랙 태그 = 자막<br></li><li>폼 필드를 하나로 묶는 태그 = fieldset<br></li><li>공간 분할 태그 = div, span<br></li><li>시멘틱 구조 = 이름을 지정해 div 대체<br></li></ol></li></ul><p>HTMLCSS 경험치 : 1 X 8 = 8exp, JSP 수업에서 배운 내용이 많았습니다.</p><hr><h3>‘Khanacademy.org 의 Intro to JS’<h6>(이하 칸JS)</h6></h3><ul><br><li>공부한 시간 : 2시간<br></li><li>새롭게 알게된 사실<br><ol type="1"><li>도형 태그 = ellipse, rect, line<br></li><li>그림 태그 = fill, stroke,nofill, nostroke, strokeweight<br></li><li>텍스트 태그 = text, textsize<br></li><li>변수, 함수 = var Varialbes, function(), draw<br></li><li>마우스 태그 = mouseXY<br></li></ol></li></ul><p>특이사항 : 한 챕터 끝나고 자기주도학습으로 주어지는 과제가 있습니다.<br>음식그리기 과제였는데, 대충해서 제출했다가 지적을 당해 다시 그려야했습니다.</p><p>JS 경험치 : 1 X 2 = 2exp, 아직 기초부분이었습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;작심일일이라 부끄러운 한 주였습니다.&lt;br&gt;친구와의 저녁약속, 컨디션 난조 등으로 생각만큼 진도를 나가지 못했습니다.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;‘성공과 실패를 결정하는 1% 네트워크 원리’&lt;h6&gt;(이하 네트워크원리)&lt;/h6&gt;&lt;/h3&gt;

&lt;ul&gt;&lt;
      
    
    </summary>
    
      <category term="2018/01" scheme="https://siml-seo.github.io/categories/2018-01/"/>
    
    
      <category term="JS" scheme="https://siml-seo.github.io/tags/JS/"/>
    
      <category term="네트워크" scheme="https://siml-seo.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"/>
    
      <category term="HTML" scheme="https://siml-seo.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://siml-seo.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>블로그 알림문</title>
    <link href="https://siml-seo.github.io/2017/12/31/test/"/>
    <id>https://siml-seo.github.io/2017/12/31/test/</id>
    <published>2017-12-31T09:16:25.000Z</published>
    <updated>2018-01-01T09:49:12.511Z</updated>
    
    <content type="html"><![CDATA[<p>이 블로그는 비전공자(어문전공)로서 IT에 입문한 백수의 성장 상황을 기록하기 위한 블로그입니다.</p><p>현 포스팅 기준 능력상황</p><p>JAVA : 1개월 수강(3 X 20 = 60시간)<br>JSP : 1개월 수강(3 X 20 = 60시간)<br>네트워크 기초 : 1개월 수강(3 X 20 = 60시간)<br>리눅스 : 2개월 수강(3 X 40 = 120시간)<br>C언어 : 1개월 수강(2 X 20 = 40시간)<br>Python : 1개월 수강(3 X 20 = 60시간)</p><p>기타 능력 전무</p><p>앞으로 개인공부를 하며 배워나간 것들 혹은, 배움상황을 기록하여 이를 경험치화하여 나갈 것입니다.</p><p>마지막에 가서는 이 것들을 이용하여 그래프(캔들)로 만들 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 블로그는 비전공자(어문전공)로서 IT에 입문한 백수의 성장 상황을 기록하기 위한 블로그입니다.&lt;/p&gt;
&lt;p&gt;현 포스팅 기준 능력상황&lt;/p&gt;
&lt;p&gt;JAVA : 1개월 수강(3 X 20 = 60시간)&lt;br&gt;JSP : 1개월 수강(3 X 20 = 
      
    
    </summary>
    
    
  </entry>
  
</feed>
